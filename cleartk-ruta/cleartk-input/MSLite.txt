This document is intended to describe the business context and requirements for the MSLite system. The MSLite system was developed by multiple universities worldwide under the sponsorship of Siemens []. The business goals are inferred from the project and the requirements are copied verbatim from the project Wiki.

Business context

E-House, Inc is a company that makes electronic systems for houses. It is a combination of a number of distinct old-line companies that have product lines in
Security
Heating
Air conditioning
Electrical
Access (house and garage doors)
Safety – fire systems 

Each product line has a management system and E-House has three goals with the system under development.
It would like to begin to charge the customer for the management system as well as sell them to other vendors.
It would like to reduce the number of management systems.
It would like to have functionality that reflects the integration of its systems. E.g. call the house and:
Lock the doors
Turn down the heat
Arm the security system

The intention is that the first version of this system will be light weight and easily extendible. It is called MSLite (Management System Lightweight). Future versions will represent incremental improvements on MSLite.

The goals for MSLite are thus – 
Manage existing product lines and combinations of product lines. 
Make it easy to add functionality that extends existing systems and also that reflects integration of systems. 
3rd part vendors can sell MSLite for hardware systems developed by other vendors
Allow for features not available in the vertical markets
Be appropriate for emerging markets (e.g. China)



Requirements for MSLite
Context diagram

Figure 1 shows the context diagram for the development of the MSLite system. Operators interact with the system within one building (maybe building complex). The Field System Simulator (FSS) is a simulator that simulates arbitrary building sensors or actuators. When placed in production, the FSS will be replaced by the actual building devices.

One or more operators interact with MSLite to respond to alerts representing conditions sensed by the building devices. The operators also have the ability to specify desired conditions for the building devices or to control theirs or others interactions with MSLite.



Important concepts
Before describing the external interaction of MSLite, we first define three important concepts.
1. Field Object. A Field Object is the logical abstraction of any building automation hardware device managed by the MSLite system. A Field device can represent for example a temperature sensor, a humidity sensor, a fan controller, a door latch or a smoke detector. 
2. Property. A property is an attribute exposed by a Field Object. Each property can only exist within a field object. For example typical properties exposed by a temperature reader would be the "current temperature" and the "operating status" (which can have the value Normal, Fault or Maintenance) 
3. Hierarchy. A hierarchy is a logical structure within MSLite organizing the presentation of field objects contained in the FSS. Hierarchies are user-definable and each user can have multiple hierarchies. In the UI, hierarchies are presented in a tree structure with logical nodes that are user defined and field objects as leaves of these nodes that can added and removed by users. E.g. A logical node can represent a room or a building (This is similar to the Windows explorer with nodes being analogous to folders and the field objects analogous to files). A logical node can be renamed by the user. Field Objects that are leaves of these nodes can only be added and / or removed from logical nodes and can not be renamed in the UI. 
User Interface
The UI is a web page represented as a workspace that contains the following elements:
1) The Work Area - The Work Area displays the properties and their respective values of the field object currently selected in the Object Browser.  Properties to which the user does not have read access are not displayed in the Work Area. 
2) The Object Browser 
a) The Object Browser displays multiple hierarchies of field objects. Each hierarchy is initially displayed as one collapsed parent node. 
b) Collapsing/Expanding of hierarchies is identical to the behavior of the standard Windows tree UI component.
3) The Alarm Viewer 
a) The Alarm Viewer displays all alarms in reverse chronological order, i.e. as a stack (Last In First Out) - with the newest alarm on top. Only alarms with the status as either not acknowledged or acknowledged are displayed. Dismissed alarms are not displayed.
Note: The Object Browser and the Work Area are a part of a section of the UI that can be manipulated using tabs (each tab maps to a separate functionality). The Alarm Viewer can never be replaced - it is always active and can not be closed.
Managing Hierarchies 
1) A user can define a new hierarchy of field objects present in the FSS at run-time using the functionality of the UI. This hierarchy can only be owned and managed by the user that created it. In order to include a field object in a hierarchy the user must have read rights to at least one property of the field object. 
2) The owner of a hierarchy can edit the hierarchy. This includes: 
a) Renaming the hierarchy or changing the description of a hierarchy. 
b) Adding a logical node to the hierarchy 
c) Renaming a logical node in a hierarchy 
d) Deleting a logical node in a hierarchy 
e) Adding a field object as a node (under the parent hierarchy or under a logical node). 
f) Removing a field object (node under the parent hierarchy or under a logical node). 
3) The owner of a hierarchy can delete the hierarchy
Managing Users 
1) A user with a valid username and password can log in to the system. Each user upon login sees all hierarchies that he / she has created for himself / herself. 
2) When a user logs in, the user's interaction with the system happens within a session.
3) When a user logs off, the system will remember his / her selection in the object browser and the user will see that selection in the object browser (and the associated view in the work area) upon login. The hierarchy that has the selection will be expanded and the other hierarchies will be collapsed (only the parent node will be visible).
Change of Value (COV) 
A Change of Value is an event generated by the FSS that represents a change in the value of a property of a field object in the FSS. This event will consist of: property identifier, new value, and timestamp. All COV events will have the same priority. 
1) The UI should show the current value of all properties of all field objects.
a) MSLite can subscribe to the COV events published by the FSS.
b) When the FSS updates a value either by itself or after executing a command that it received from MSLite it publishes a COV event. MSLite is subscribed to COV events and receives the COV event notifications. 
c) The UI receives notification of the COV event from MSLite and reflects the updated value. 
Commands 
A command is a request to change the value of a property of a field object. It is therefore the same as a change of value (COV) of a property of a field object.
1) The user can issues commands from the UI to change the value of a property of a field object. The user must have write access to the property for which the command is being issued.
2) The UI transmits this command to MSLite.
3) MSLite send the command to the FSS. 
4) The successful transmission of a command to the FSS is reflected in the UI.
5) If the FSS fails to execute a command that it received, and notifies MSLite, then the UI must be updated to reflect the failed command.
Logic & Reactions (L&R) 

Logical Condition
This is a condition that is based on the value of a unique property of a unique field object. It is specified in a form that allows for specifying a condition such as when a certain property of a certain field object either meets/exceeds/falls below a certain value.. Therefore these can be defined using standard programming logical operators. 
Reaction
This is a command, only it is not issued by the user and is issued by MSLite when a certain logical condition is met. 
L&R Rule
A L&R rule has two parts, a logical condition and a reaction. Each L&R rule can have only one reaction. 
1) A user can create a L&R rule. This can be done only if the user has read access to all properties that are part of the logical condition and write access to the property affected by its reaction. There can be only one reaction in every L&R rule - the user can create multiple L&R rules with the same logical condition but different reactions. In this case, it is also possible to specify the sequence of the rule execution.
2) A user can edit L&R rules obeying the same rules as specified for creation.
3) A user can also delete an L&R rule. This can be done only if the user has write access to the property affected by its reaction.
4) L&R rules are triggered in a user-independent context. This implies that when a logical condition is met, MSLite automatically issues a command. 
Alarms 

Alarm Condition
This is a condition that is based on the value of a unique property of a unique field object. It is exactly the same construct as the logical condition for L&R rules. 
Alarm
A construct defined and understood only by MSLite, an Alarm is a property of a field object that is in an abnormal state. 
Alarm Rule
An Alarm rule has two parts, an alarm condition and an alarm. Each Alarm rule can have only one Alarm. 
Associated Alarm Property
The unique property considered to be an abnormal state and therefore an alarm is the associated alarm property. This alarm property must be used in the alarm condition.
1) A user can create an alarm rule. This can be done only if the user has read access to all properties that are part of the alarm condition and write access to the associated alarm property. There can be only one associated alarm property and alarm in every alarm rule - the user can create multiple alarm rules with the same alarm condition but different alarms and different associated alarm properties. In this case, it is also possible to specify the sequence of the alarm generation.
2) A user can edit alarm rules obeying the same rules as specified for creation.
3) A user can also delete an alarm rule. This can be done only if the user has write access to the the associated alarm property.
4) Alarm rules are triggered in a user-independent context. This implies that when an alarm condition is met, MSLite automatically generates an alarm. When an alarm is generated: 
a) Alarms are persisted in the database. 
b) It is displayed in the work area as a request for acknowledging the alarm. This is displayed to all logged in users who have read access to the associated alarm property for the alarm. 
c) It is also displayed in the alarm viewer with its status as not acknowledged. All alarms in the alarm viewer are displayed in reverse chronological order, i.e. as a stack (Last In First Out) - with the newest alarm on top. The following properties for the alarm are displayed in the alarm viewer: 
(i) Alarm Name - The custom name of the alarm specified at the time of the creation of the Alarm Rule. 
(ii) Time - The Time stamp of occurrence 
(iii) Status - Ack (for Acknowledged / Not Ack (for Not Acknowledged) 
(iv) Object Property (Object Name and Associated Alarm Property separated with a .) 
(v) Trigger Value (Value of associated alarm property that triggered the alarm) 
(vi) Owner - User name who acknowledged the alarm (if the alarm is acknowledged) and None (if the alarm is Not Acknowledged). 
5) Any user can acknowledge an alarm when the request for acknowledging it is displayed in the work area. After an alarm is acknowledged by any one user: 
a) A single user acknowledging an alarm automatically removes the request for acknowledgement from the screens of all other users. 
b) The alarm is displayed only in the alarm viewer with its status as acknowledged. 
c) The alarm status will be updated to acknowledged in the database.
6) Once an alarm has been acknowledged by a user it can be dismissed from the system only by that user or the administrator of the system. This is done by selecting the acknowledged alarm in the AlarmViewer of the UI and choosing the Dismiss Alarm option. This will also remove the Alarm from the system's database. 
Access Control 

1) Access rights are configured statically and can not be changed at run time. 
a) Access control is defined at the level of a property for each user. 
b) A user or user group could have write or read access or both forms of access to each property of each field object. 
c) The highest access right wins. E.g. if a user group does not have write access for a property but a user belonging to it has, then user right wins over the user group right.
Synchronize MSLite with FSS configuration 

FSS

1) Synchronization of MSLite and the current FSS is done by providing the same XML configuration file to both the FSS and MSLite. 
a) The FSS configuration is static and will not change at runtime (i.e. no dynamic addition/deletion of field system objects).

Use Cases
UCP000: MSLite Use Case Package 
Top level use case package of the MSLite System. All use cases and packages are included within this main package. 

UCP000: MSLite Use Case Package

UCP 000 - UC 001: Issue Command 
The user selects a field object property to modify. Specifies the new value of the property and sees the change reflected in the UI. 
Main Success Scenario 
1. User selects a field object from a hierarchy in the object browser. 
2. System displays the properties to which the user has read access of the selected field object in the Work Area. [UC001.UI001] 
3. System verifies user has write access to property and enables “Issue Command” button for those properties for which the user has write access. 
4. User selects the “Issue command” button. 
5. System prompts the user for the new value of the property..[UC001.UI002] 
6. User inputs a new value. 
7. User confirms the command by selecting the “Send Command” button. 
8. System transmits the command to the FSS. 
9. System indicates the command was sent but no confirmation was received yet. [UC001.UI003] 
10. FSS Sends a COV notification, confirming the success of the command. 
11. System displays the new property value in the Work Area. [UC001.UI004](confirms command success) 
Extension 001.3a 
3a - User has no write access to the selected property:
1. “Issue Command” button is disabled (grayed out). (“Property 3” on the screen).[UC001.UI001] 
Extension 001.7a 
7a - Erroneous value entered: 
1. System notifies the user of the incorrect value. E.g. An alphanumeric value is entered for a property that accepts only numeric values; A numeric value is entered for a property that accepts either true or false. 
2. System does not send the command to the FSS 
Extension 001.10a 
10a - Command fails at the FSS level (either the COV is not received within a timeout period or the FSS sends back an exception for the command): 
1. System notifies the user of command failure and reason of failure.[UC001.UI005] 
Preconditions 
1. The user is authenticated 
2. The Object Browser contains at least one hierarchy with one field object and one field property. 


End of UCP 000 - UC 001: Issue Command


UCP 000 - UC 002: Manage Change of Value 
The Field System Simulator sends a notification of a Change of Value to the system. The system updates its internal object model, updates the UI and potentially executes Rules and Alarms. 
Main Success Scenario 
1. FSS sends notification of Change of Value for an object property 
2. System updates the property value in its internal object model. 
Extension 002.2a 
2a - Updated property is currently displayed in the work area: 
1. System updates the UI to reflect the new value of the property. 

End of UCP 000 - UC 002: Manage Change of Value

UCP 000 - UC 003: Trigger LnR Rule 
A received Change of Value event changes the system status so that a Logic and Reaction condition is evaluated to the value = "true" and this causes the execution of a reaction (equivalent to the issuance of a command). 
Main Success Scenario 
1. System receives a COV event and positively evaluates condition of at least one Logical condition. 
2. The command that is configured in the reaction of the logical condition that evaluated to true will be executed. 
3. The order of execution of the rules is determined by their order in the "Configure Logic & Reaction" screen[UC201.UI001] 
Extension 003.1a 
1a - Multiple logical conditions are evaluated to a "true" value as a result of the COV: 
1. For each logical condition evaluated to a "true" value, the system executes all steps of the main sucess scenario. The order of execution of the rules is determined by their order in the "Configure Logic & Reaction" screen.[UC201.UI001] 
Preconditions 
1. Use Case MSLite-UC002 is executed successfully and triggers extension MSLite-UC002.2a 

End of UCP 000 - UC 003: Trigger LnR Rule 

UCP 000 - UC 004: Generate Alarm 
A received Change of Value event changes the system status so that an Alarm condition is evaluated to the value = "true" and this causes the execution of an alarm rule and therefore the generation of an alarm. 
Main Success Scenario 
1. System receives a COV event and positively evaluates condition of at least one Alarm rule. 
2. System persists the alarm and all its attributes in the system database. 
3. System displays a new alarm line with the status “Not Ack.” at the top of the Alarm Viewer for all logged in users with read access to the associated alarm property. [UC004.UI001] This line contains the following info: 
a. Alarm Name - The custom name of the alarm specified at the time of the creation of the Alarm Rule. 
b. Time - The Time stamp of occurence 
c. Status - Ack (for Acknowledged / Not Ack (for Not Acknowledged) 
d. Object Property (Object Name and Associated Alarm Property separated with a .) 
e. Trigger Value (Value of associated alarm property that triggered the alarm) 
f. Owner - User name who acknowledged the alarm (if the alarm is acknowledged) and None (if the alarm is Not Acknowledged). 
4. System displays “Alarm Acknowledgment Request” dialog for all logged in users with read access to the associated alarm property.[UC004.UI001] This dialog shows the following elements: 
a. Alarm Name - The custom name of the alarm specified at the time of the creation of the Alarm Rule. 
b. Time - The Time stamp of occurence 
c. Object Property (Object Name and Associated Alarm Property separated with a .) 
d. Trigger Value (Value of associated alarm property that triggered the alarm) 
Extension 004.1a 
1a - Multiple alarm rules are evaluated to a "true" value as a result of the COV: 
1. For each alarm rule evaluated to a "true" value, the system executes all steps of the main success scenario. The order of execution of the rules is determined by their order in the "Configure Alarm Rules" screen[UC301.UI001] 
Extension 004.3a 
3a - New alarm is generated while the “Alarm Acknowledgment Request” is still displayed: 
1. System displays multiple superimposed “Alarm Acknowledgment Request” dialogs, ordered in reverse chronological order with the dialog for the newest alarm on top.[UC004.UI002] 
Preconditions 
1. A COV event is received successfully 

End of UCP 000 - UC 004: Generate Alarm 

UCP 000 - UC 005: Acknowledge Alarm 
After an alarm is generated, a user acknowledges the alarm. The system updates the UI accordingly for all users. 
Main Success Scenario 
1. User acknowledges the alarm by selecting the “Acknowledge Alarm” button in the Acknowledge Alarm Request dialog box.[UC005.UI001] 
2. System updates the state of the alarm in the system database. 
3. System closes the “Alarm Acknowledgment Request” dialog for all users seeing it. 
4. System changes the status of the alarm to “Ack” in the Alarm Viewer for all users seeing it.[UC005.UI002] 
5. System assigns the user who acknowledged the alarm as the owner of the alarm and will update the database. 
Extension 005.4a 
4a - User selected the “ignore” button in the acknowledge alarm dialog box.[UC004.UI001]: 
1. The Acknowledge Alarm Request dialog box is closed only for the user that clicked on the Ignore button 
2. The Alarm Viewer will still display the alarm with its state as "Not Ack." for all viewers allowed to see the alarm, until some other user also seeing the request acknowledges the alarm. 
Preconditions 
1. The user has read access to the associated alarm Property. 
2. An alarm has been generated and the user can see the acknowledge alarm dialog box.[UC004.UI001] 

End of UCP 000 - UC 005: Acknowledge Alarm 


UCP 000 - UC 006: Dismiss Alarm 
After an alarm is acknowledged by a user, this user or the administrator can dismiss it. The system updates the UI accordingly for all users. 
Main Success Scenario 
1. User dismisses the alarm by selecting the action icon for the specific alarm in the AlarmDisplay.[UC006.UI001] 
2. User selects the Dismiss Alarm Option from the popup window. 
3. System verifies the alarm is acknowledged. 
4. System verifies user is the owner of the acknowledged alarm. 
5. System closes the “Alarm Dismissal Request” dialog. 
6. System deletes the alarm from the system database. 
7. System removes the alarm from the Alarm List for all users seeing it.[UC006.UI002] 
Extension 005.4a 
3a - Alarm is not acknowledged: 
1. System displays an error message mentioning that it is impossible to dismiss unacknowledged alarms. 
Preconditions 
1. Use Case MSLite-UC005 is executed successfully by this user. 

End of UCP 000 - UC 006: Dismiss Alarm 


UCP 000 - UC 007: Browse Hierarchy 
A user browses a hierarchy in the hierarchy browser by expanding and collapsing logical nodes and selecting field objects of which the system displays the accessible properties in the work area. 
Main Success Scenario 
1. Object Browser: The Object Browser displays hierarchies (with parent logical nodes, children logical nodes and field objects for each logical node) that an authenticated User owns. All hierarchies are user specific and are persisted in the database. 
2. Object Browser: User expands the first level of the hierarchy by selecting the “+” handle next to the hierarchy name. 
3. Object Browser: System displays the direct children of the expanded hierarchy and switches the “+” handle of the hierarchy name to a “-” handle. If a hierarchy is selected / highlighted by a user, then the system displays the hierarchy name and the hierarchy description in the Work Area. 
4. Object Browser: User expands a logical node in the hierarchy by selecting the “+” handle next to the logical node name. If a logical node is selected / highlighted by a user, then the system displays the logical node name in the Work Area. 
5. Object Browser: System displays the direct children of the expanded logical node and switches the “+” handle of the logical node to a “-” handle. 
6. Object Browser: User selects a field object from the children of the expanded node. 
7. System verifies the access rights of the user to the properties of the selected field object. 
8. Work Area: System displays the field object name and the field object properties to which the user has at least read access in the work area.[UC001.UI001] 
9. Object Browser: User collapses a logical node in the hierarchy by selecting the “-” handle next to the logical node name. 
10. Object Browser: System hides all children of the logical node and switches the “-” handle of the logical node name to an “+” handle. 
11. Object Browser: User collapses a hierarchy by selecting the “-” handle next to the hierarchy name. 
12. Object Browser: System hides all children of the hierarchy and switches the “-” handle of the hierarchy name to an “+” handle. 
13. User selectively repeats steps 2 through 11. 
Preconditions 
1. The user is authenticated 
2. The Object Browser contains at least one hierarchy with one logical node, one field object and one field property. 

End of UCP 000 - UC 007: Browse Hierarchy 



End of UCP000: MSLite Use Case Package 


UCP 100: Manage Hierarchies 
This package contains all use cases related to operations on hierarchies. These operations include creation, editing and deletion of hierarchies. This package also includes a set of extending use cases which detail the construction steps of a hierarchy. 
UCP 100 - UC 101: Create Hierarchy 
A user creates a hierarchy. 
Main Success Scenario 
1. User selects the “Hierarchies” tab on the screen. 
2. System displays the “Configure Hierarchies” screen.[UC101.UI001] 
3. User selects the “Create Hierarchy” button.[UC101.UI001] 
4. System displays the “Create Hierarchy” screen.[UC101.UI002] 
5. User enters a hierarchy name in step 1.[UC101.UI002] 
6. User enters a hierarchy description in step 2.[UC101.UI002] 
7. User selectively instantiates one of the following extending use cases: 
UC104: Create Logical Node 
UC105: Delete Logical Node (only after a logical node has been created) 
UC106: Rename Logical Node (only after a logical node has been created) 
UC107: Add Field Object 
UC108: Remove Field Object (only after a field object has been added) 
8. User selects the “Create Hierarchy” button.[UC101.UI003] 
9. System verifies the hierarchy name is unique. 
10. System persists the hierarchy information in the database. 
11. System displays the “Configure Hierarchies” screen and displays the newly created hierarchy in the hierarchies list.[UC101.UI004] 
Extension 101.9a 
9a - A hierarchy with an identical name already exists for the current user: 
1. System displays an error message specifying that a hierarchy with an identical name already exists. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 101: Create Hierarchy 

UCP 100 - UC 102: Edit Hierarchy 
A user edits an existing hierarchy. This could mean a name change for the hierarchy. Or adding/renaming/removing logical nodes and field objects of the hierarchy. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.[UC102.UI001] 
6. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
7. User may modify the hierarchy name - step 1.[UC102.UI002] 
8. User may modify the hierarchy description - step 2.[UC102.UI002] 
9. User selectively instantiates one of the following extending use cases: 
UC104: Create Logical Node 
UC105: Delete Logical Node 
UC106: Rename Logical Node 
UC107: Add Field Object (yes, field objects can be added at the level of the parent hierarchy as well) 
UC108: Remove Field Object 
10. User selects the “Save Hierarchy” button.[UC102.UI003] 
11. System verifies the hierarchy name is unique. 
12. System verifies the hierarchy is not being edited by the same user in a different session. 
13. System persists the hierarchy information in the MSLite database. 
14. System displays the “Configure Hierarchies” screen and displays the edited hierarchy with its edited name/description/logical nodes/field objects in the hierarchies list.[UC102.UI004] 
Extension 102.11a 
11a - A hierarchy with an identical name already exists: 
1. System displays an error message specifying that a hierarchy with an identical name already exists. 
Extension 102.12a 
12a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be edited. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 102: Edit Hierarchy 

UCP 100 - UC 103: Delete Hierarchy 
A user deletes an existing hierarchy. 
Main Success Scenario 
1. User selects the “Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC103.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.UC103.UI001] 
4. User selects the “Delete Hierarchy” button - step 2.UC103.UI001] 
5. System displays a hierarchy deletion confirmation dialog.UC103.UI002] 
6. User confirms the deletion of the hierarchy - step 1.[UC103.UI002] 
7. System verifies the hierarchy is not being edited by the same user in a different session. 
8. If a hierarchy is deleted all its child logical nodes and / or field objects will be deleted as well. 
9. System displays the “Configure Hierarchies” screen. The deleted hierarchy name is not displayed in the hierarchies list.[UC103.UI003] 
Extension 103.7a 
7a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be deleted. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 103: Delete Hierarchy 

UCP 100 - UC 104: Create Logical Node (Abstract) 
A user adds a logical node to a hierarchy, either during the initial creation of the hierarchy or during editing a hierarchy. This use case is abstract and cannot be instantiated on its own. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.[UC102.UI001] 
6. System verifies the hierarchy is not being edited by the same user in a different session. 
7. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
8. User sets a logical node “Insertion point” by selecting an item in the “Hierarchy Tree Editor” - step 1.[UC104.UI001] 
9. User selects the “Add Node” Button - step 2.[UC104.UI001] 
10. System verifies the “Insertion point” is either a hierarchy’s root element or a logical node. 
11. System prompts the user for the name of the logical node to create.[UC104.UI002] 
12. User enters a name for the Logical node. 
13. System verifies no other logical node with the same name exists at the selected insertion point. 
14. System creates a logical node as a child of the insertion point.[UC104.UI003] 
15. User repeats steps 8 to 14 for each logical node to be created. 
Extension 104.8a 
8a - Destination insertion point is a field object: 
1. System displays an error message specifying that the destination insertion point cannot be a field object. 
2. Flow of events restarts from 8 
Extension 104.13a 
13a - A logical node with the same name exists at the selected insertion point: 
1. System displays an error message specifying that a logical node with the same name already exists at the same location. 
2. Flow of events restarts from 8 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 104: Create Logical Node (Abstract) 

UCP 100 - UC 105: Delete Logical Node (Abstract) 
A user deletes a logical node from the hierarchy, either during the creation of a hierarchy or during editing a hierarchy. This use case is abstract and cannot be instantiated on its own. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.[UC102.UI001] 
6. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
7. User selects a logical node from the “Hierarchy Tree Editor”. 
8. User selects the “Delete Node” button 
9. System displays a confirmation dialog mentioning that all children of the logical node will be removed from the hierarchy. 
10. User confirms the deletion of the logical node. 
11. System verifies the hierarchy is not being edited by the same user in a different session. 
12. System removes the logical node and its children from the “Hierarchy Tree Editor”. If a logical nodel is deleted all its child logical nodes and / or field objects will be deleted as well. 
13. User repeats steps 7 to 12 for all logical nodes to be deleted. 
Extension 105.11a 
11a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be deleted. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 105: Delete Logical Node (Abstract) 

UCP 100 - UC 106: Rename Logical Node (Abstract) 
A user renames a logical node from the hierarchy, either during the creation of the hierarchy or during editing a hierarchy. This use case is abstract and cannot be instantiated on its own. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.UC102.UI001] 
6. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
7. User selects a logical node from the “Hierarchy Tree Editor”. 
8. User selects the “Rename Node” button 
9. System displays a dialog asking for the new Logical Node name. 
10. User enters the new name of the logical node and clicks on "OK". 
11. System verifies no other logical node with the same name exists at the selected insertion point. 
12. System verifies the hierarchy is not being edited by the same user in a different session. 
13. System reflects the new name of the logical node in the “Hierarchy Tree Editor” 
Extension 106.11a 
11a - A logical node with the same name exists at the selected insertion point: 
1. System displays an error message specifying that a logical node with the same name already exists at the same location. 
2. Flow of events restarts from 7 
Extension 106.12a 
12a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be deleted. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 106: Rename Logical Node (Abstract) 

UCP 100 - UC 107: Add Field Object (Abstract) 
A user adds a field object to a hierarchy, either during its initial creation or during an editing operation. This use case is abstract and cannot be instantiated on its own. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.[UC102.UI001] 
6. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
7. User selects a field object from the “Field object list” - step 1.[UC107.UI001] 
8. User sets an “Insertion point” by selecting an item in the “Hierarchy Tree Editor” - step 2.[UC107.UI001] This may be a multiple select 
9. User selects the “Add Object as node” button - step 3.[UC107.UI001] 
10. System verifies the destination insertion point is either a hierarchy’s root element or a logical node. 
11. System verifies that the field object is not already present at the selected insertion point. 
12. System verifies the user has read access to at least one property of the field object. 
13. System verified that the user is not editing the hierarchy in another session. 
14. System adds the selected field object as a child node of the destination insertion point.[UC107.UI002] 
15. System keeps the added field object available in the “Field object list” for possible other insertions. 
16. User repeats steps 7 to 15 for each field object to be added to the hierarchy. 
Extension 107.10a 
10a - Destination insertion point is a field object: 
1. System displays an error message specifying that the destination insertion point cannot be a field object. 
2. Flow of events restarts from 7 
Extension 107.11a 
11a - Selected field object is already present at the selected insertion point: 
1. System displays an error message specifying that a logical node cannot contain duplicates of the same field object. 
2. Flow of events restarts from 7 
Extension 107.12a 
13a - User does not have read access to any property of the selected field object: 
1. System displays an error message specifying that the user doesn’t have enough access rights to add the select field object to the hierarchy. 
2. Flow of events restarts from 7 
Extension 107.13a 
13a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be deleted. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 107: Add Field Object (Abstract) 

UCP 100 - UC 108: Remove Field Object (Abstract) 
A user removes a field object from a hierarchy, either during the creation of a hierarchy or during editing a hierarchy. This use case is abstract and cannot be instantiated on its own. 
Main Success Scenario 
1. User selects the “Configure Hierarchies” tab. 
2. System displays the “Configure Hierarchies” screen.[UC102.UI001] 
3. User selects a hierarchy from the hierarchy list - step 1.[UC102.UI001] 
4. System displays the description of the hierarchy in the Hierarchy Description box - step 2.[UC102.UI001] 
5. User selects the “Edit Hierarchy” button - step 3.[UC102.UI001] 
6. System displays the “Edit Hierarchy” screen.[UC102.UI002] 
7. User selects a field object from the “Hierarchy Tree Editor”. This may be a multiple select 
8. User selects the “Remove Node” button 
9. System verified that the user is not editing the hierarchy in another session. 
10. System removes the selected Field Object from the hierarchy. 
11. User repeats steps 1 to 3 for all field objects to be removed from the hierarchy. 
Extension 108.8a 
8a – Selected item is not a field object: 
1. System displays an error message specifying that the selected button can remove field objects only. 
Extension 108.8b 
8b – No item is selected in the “Hierarchy Tree Editor”: 
1. System displays an error message asking the user to select a field object before using this button. 
Extension 108.9a 
9a - Hierarchy is currently being edited (only possible by the same user in a different session): 
1. System displays an error message specifying that the hierarchy is being edited, and therefore cannot be deleted. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 100 - UC 108: Remove Field Object (Abstract) 



End of UCP 100: Manage Hierarchies 



UCP 200: Manage Logic & Reaction Rules 
This package contains all use cases related to operations on Logic & Reaction Rules. These operations include creation, editing and deletion of Logic & Reaction Rules. 
UCP 200 - UC 201: Create Logic and Reaction Rule 
A user creates a Logic and Reaction rule by specifying the rule’s “Logical Conditions” and “Reaction”. 
Main Success Scenario 
1. User selects the “L&R” tab. 
2. System displays the “Logic and Reaction Configuration” screen. 
3. User selects the “Create L&R Rule” button. 
4. System displays the “Create L&R Rule” screen.[UC201.UI002] 
5. User enters the name of the L&R Rule to be created - step 1.[UC201.UI003] 
6. User configures the “Logical Condition” part of the rule by configuring individual conditions 
7. User configures an individual condition as follows: 
1. User selects an object from the object list - step 2.[UC201.UI003] 
2. System displays only the properties of the selected object in the properties list that the user has read access to - step 3.[UC201.UI004] 
3. User selects a property from the properties list. 
4. User selects type of condition which can be one of the following - step 4[UC201.UI004]: 
“Is Equal to” + (Numeric or Alphanumeric) Value 
“Is Not Equal to” + (Numeric or Alphanumeric) Value 
“Is greater than” + (Numeric) Value 
“Is less than” + (Numeric) Value 
“Is True” 
“Is False” 
5. System enables or disables condition value(s), depending on the condition type chosen. 
6. User optionally enters a condition value. 
8. User repeats step 7 for each individual condition. Only up to 10 individual condition parts like this can be specified. 
9. User combines individual conditions with Boolean operators and parentheses - steps 5 & 6. 
10. User configures the “Reaction” part of the rule[UC201.UI006]: 
1. User selects an object from the object list - step 7.[UC201.UI006] 
2. System displays the properties of the selected object in the properties list - step 8[UC201.UI006] - only those that the user has write access to are displayed. 
3. User selects a property from the properties list. 
4. System verifies user has write access to the property. 
5. User enters the value of the command to be issued - step 9.[UC201.UI006] 
6. Based on the type of value that the property can take, the system verifies the validity of the input. 
11. User completes the creation of the rule by selecting the “Create Rule” button - step 10.[UC201.UI007] 
12. System verifies the correctness of rule parameters. 
13. System creates a new rule with the specified parameters and persists it in the database and in the cache for performance. 
14. System displays the “Logic and Reaction Configuration” screen, with the new rule added to the L&R Rule list.[UC201.UI008] 
Extension 201.12a 
12a - Rule name already exists: 
1. System displays an error message mentioning that an L&R rule with the same name already exists. 
2. User enters a new L&R rule name. 
3. Event flow continues 
Extension 201.12b 
12b - Logical condition contains an error: 
1. System displays an error message mentioning that the Logical Condition contains error(s).[UC201.UI009] 
2. User corrects error(s) in the Logical Condition. 
3. Event flow continues 
Extension 201.12c 
12b - Reaction contains an error: 
1. System displays an error message mentioning that the Reaction contains error(s). E.g. An error could be invalid format or value for the property - in "command value". 
2. User corrects error(s) in the Reaction. 
3. Event flow continues 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 200 - UC 201: Create Logic and Reaction Rule 

UCP 200 - UC 202: Edit Logic and Reaction Rule 
A user edits an existing Logic and Reaction rule and modifies some or all parameters of its “Logical Conditions” and “Reaction”. 
Main Success Scenario 
1. User selects the “L&R” tab. 
2. System displays the “Logic and Reaction Configuration” screen.[UC201.UI001] 
3. User selects a rule from “L&R Rules” list - step 1.[UC202.UI001] 
4. User selects the “Edit L&R Rule” button.[UC202.UI001] 
5. System Verifies user has read access to all properties in the logical condition of the rule and write access to the property affected by its reaction. Only then can the user edit the L&R rule. 
6. System displays the “Edit L&R Rule” screen.[UC202.UI002] 
7. User may modify the name of the L&R rule - step 1.[UC202.UI003] 
8. User may modify the “Logical Condition” part of the rule by modifying individual conditions - step 2.[UC202.UI003] 
9. User may modify the “Reaction” part of the rule” - step 3.[UC202.UI003] 
10. User completes the edition of the rule by selecting the “Save Rule” button - step 4.[UC202.UI003] 
11. System verifies the correctness of rule parameters. 
12. System verifies the selected rule is not being edited by another user or by the current user in another session. 
13. System displays the “Logic and Reaction Configuration” screen, with the updated rule name in the L&R Rule list.[UC202.UI004] 
Extension 202.5a 
5a - User has no read access to any one property in the Logical Condition section of the selected rule: 
1. System displays error message stating that the User does not have appropriate access rights to edit the rule. 
Extension 202.5b 
5b - User has no write access to the selected property in the Reaction section: 
1. System displays error message stating that the User does not have appropriate access rights to edit the rule. 
Extension 202.11a 
11a - Rule name already exists: 
1. System displays an error message mentioning that an L&R rule with the same name already exists. 
2. User enters a new L&R rule name. 
3. Event flow continues 
Extension 202.11b 
11b - Logical condition contains an error: 
1. System displays an error message mentioning that the Logical Condition contains error(s). 
2. User corrects error(s) in the Logical Condition. 
3. Event flow continues. 
Extension 202.11c 
11c - Reaction contains an error: 
1. System displays an error message mentioning that the Reaction contains error(s). 
2. User corrects error(s) in the Reaction. 
3. Event flow continues. 
Extension 202.12a 
12a - Selected rule is being edited by another user or by the current user in another session: 
1. System deselects the selected rule and displays an error message specifying that the rule is being edited by another user or by the current user in another session. 

Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 200 - UC 202: Edit Logic and Reaction Rule 

UCP 200 - UC 203: Delete Logic and Reaction Rule 
A user deletes an existing Logic and Reaction Rule. The system verifies the user has proper rights for deletion and removes the rule from the L&R rule list. 
Main Success Scenario 
1. User selects the “L&R” tab. 
2. System displays the “Logic and Reaction Configuration” screen.[UC203.UI001] 
3. User selects a rule from “L&R Rules” list - step 1.[UC203.UI001] 
4. User selects the “Delete L&R Rule” button - step 2.[UC203.UI001] 
5. System verifies user has read access to all properties that are a part of the condition and write access to the property affected by reaction of the rule. Only then can the user edit the L&R rule. 
6. System displays the “Rule deletion confirmation” dialog.[UC203.UI002] 
7. User confirms the deletion of the rule by selecting the “Delete” button - step 1.[UC203.UI002] 
8. System verifies the selected rule is not being edited by another user or by the current user in another session. 
9. System removes the deleted rule from its set of persisted rules. 
10. System displays the “Logic and Reaction Configuration” screen. The deleted rule name is not displayed in the L&R Rule list.[UC203.UI003] 
Extension 203.5a 
5a - User has no read access to a property in the Logical Condition section of the selected rule or no write access to the affected property in the Reaction section: 
1. System displays an error message specifying that the user doesn’t have sufficient access rights to delete the selected rule. 
Extension 203.8a 
8a - Selected rule is being edited by another user or by the current user in another session: 
1. System displays an error message specifying that the selected rule cannot be deleted because it is currently edited by another user or by the current user in another session. 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 200 - UC 203: Delete Logic and Reaction Rule 




End of UCP 200: Manage Logic & Reaction Rules 




UCP 300: Manage Alarms Rules
This package contains all use cases related to operations on Alarm Rules. These operations include creation, editing and deletion of Alarm Rules. 
UCP 300 - UC 301: Create Alarm Rule 
A user creates an Alarm rule by specifying the rule’s “Alarm Conditions” and the associated alarm property. 
Main Success Scenario 
1. User selects the “Alarms” tab. 
2. System displays the “Configure Alarm Rules” screen. #User selects the “Create Alarm Rule” button.[UC301.UI001] 
3. System displays the “Create Alarm Rule” screen.[UC301.UI002] 
4. User enters the name of Alarm Rule to be created - step 1.[UC301.UI003] 
5. User enters the name of Alarm to be generated - step 2.[UC301.UI003] 
6. User configures the “Alarm Condition” part of the alarm rule by configuring individual conditions 
7. User configures an individual condition as follows: 
1. User selects an object from the object list - step 3.[UC301.UI003] 
2. System displays only the properties of the selected object in the properties list that the user has read access to - step 4.[UC301.UI004] 
3. User selects a property from the properties list. 
4. User selects type of condition which can be one of the following - step 5[UC301.UI004]: 
“Is Equal to” + (Numeric or Alphanumeric) Value 
“Is Not Equal to” + (Numeric or Alphanumeric) Value 
“Is greater than” + (Numeric) Value 
“Is less than” + (Numeric) Value 
“Is True” 
“Is False” 
5. System enables or disables condition value(s), depending on the condition type chosen. 
6. User optionally enters a condition value. 
8. User repeats step 7 for each individual condition. Only up to 10 individual condition parts like this can be specified. 
9. User combines individual conditions with Boolean operators and parentheses - steps 6 and 7.[UC301.UI005] 
10. User selects the “Associated Alarm Property” dropdown list - step 8 [UC301.UI006] - only those that the user has write access to are displayed. 
11. User completes the creation of the rule by selecting the “Create Rule” button - step 10.[UC301.UI007] 
12. System verifies the correctness of rule parameters. 
13. System verifies that there are no other Alarm rules and Alarm Names with the same name as specified. 
14. System creates a new alarm rule with the specified parameters and persists it in the database and in the cache for performance. 
15. System displays the “Configure Alarm Rules” screen, with the new rule added to the Alarm Rules list.[UC301.UI008] 
Extension 301.13a 
13a - Alarm condition contains an error: 
1. System displays an error message mentioning that the Alarm Condition contains error(s).[UC301.UI009] 
2. User corrects error(s) in the Alarm Condition. 
3. Event flow continues 
Extension 301.14a 
14a - Alarm Rule name or Alarm Name already exists: 
1. System displays an error message mentioning that an Alarm rule or Alarm Name with the same name already exists. 
2. User enters a new Alarm rule name or Alarm Name. 
3. Event flow continues 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 300 - UC 301: Create Alarm Rule 

UCP 300 - UC 302: Edit Alarm Rule 
Brief Description 
A user edits an existing Alarm rule and modifies some or all parameters of its “Alarm Conditions” and its associated alarm property. 
Main Success Scenario 
1. User selects the “Alarms” tab. 
2. System displays the “Configure Alarm Rules” screen.[UC302.UI001] 
3. User selects a rule from “Alarm Rules” list - step 1.[UC302.UI001] 
4. User selects the “Edit Alarm Rule” button. 
5. System Verifies user has read access to all properties in the Alarm condition of the rule and write access to the associated alarm property. Only then can the user edit the Alarm rule. 
6. System displays the “Edit Alarm Rule” screen.[UC302.UI002] 
7. User may modify the name of the Alarm Rule - step 1 or may modify the Alarm Name.[UC302.UI003] 
8. User may modify the “Alarm Condition” part of the rule by modifying individual conditions - step 2.[UC302.UI003] 
9. User may modify the “Alarm” (or reaction) part of the rule - step 3[UC302.UI003] 
10. User completes editing the rule by selecting the “Save Rule” button - step 4.[UC302.UI003] 
11. System verifies the correctness of rule parameters. 
12. System verifies the selected rule is not being edited by another user or by the current user in another session. 
13. System displays the “Configure Alarm Rules” screen, with the updated rule name in the Alarm Rule list.[UC302.UI004] 
Extension 302.5a 
5a - User has no read access to a property in the Logical Condition section of the selected rule: 
1. System display a corresponding error message stating that the user does not have adequate rights to edit the alarm rule 
Extension 302.5b 
5b - User has no write access to the selected property in the Reaction section: 
1. System display a corresponding error message stating that the user does not have adequate rights to edit the alarm rule 
Extension 302.6a 
6a - Selected rule is being edited by another user or by the current user in another session: 
1. System deselects the selected rule and displays an error message specifying that the rule is being edited by another user or by the current user in another session. 
Extension 302.12a 
12a - Alarm Rule name or Alarm Name already exists: 
1. System displays an error message mentioning that an Alarm rule or Alarm Name with the same name already exists. 
2. User enters a new Alarm rule name or Alarm Name. 
3. Event flow continues at 8. 
Extension 302.12b 
12b - Alarm condition contains an error: 
1. System displays an error message mentioning that the Alarm Condition contains error(s). 
2. User corrects error(s) in the Alarm Condition. 
3. Event flow continues 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 300 - UC 302: Edit Alarm Rule 

UCP 300 - UC 303: Delete Alarm Rule 
Brief Description 
A user deletes an existing Alarm Rule. The system verifies the user has proper rights for deletion and removes the rule from the Alarm rules list. 
Main Success Scenario 
1. User selects the “Alarms” tab. 
2. System displays the “Configure Alarm Rules” screen.[UC303.UI001] 
3. User selects a rule from “Alarm Rules” list - step 1.[UC303.UI001] 
4. User selects the “Delete Alarm Rule” button - step 2.[UC303.UI001] 
5. System verifies user has read access to all properties that are a part of the condition and write access to the associated alarm property. Only then can the user edit the Alarm rule. 
6. System displays the “Rule deletion confirmation” dialog.[UC303.UI002] 
7. User [[confirms the deletion of the rule by selecting the “Delete” button - step 1.[UC303.UI002] 
8. System verifies the selected rule is not being edited by another user or by the current user in another session. 
9. System removes the deleted rule from its set of persisted rules. 
10. System displays the “Configure Alarm Rules” screen. The deleted rule name is not displayed in the Alarm Rules list.UC303.UI003] 
Extension 303.5a 
5a - User has no read access to a property in the Alarm Condition section of the selected rule or no write access to the associated alarm property: 
1. System displays an error message specifying that the user doesn’t have sufficient access rights to delete the selected rule. 
Extension 303.8a 
8a - Selected rule is being edited by another user or by the current user in another session: 
1. System displays an error message specifying that the selected rule cannot be deleted because it is currently edited by another user or by the current user in another session 
Additional Requirements 
1. At all times during hierarchy creation, the Alarm Viewer is visible and accessible. If alarms occur in the system normal alarm workflow will occur. 

End of UCP 300 - UC 303: Delete Alarm Rule 




End of UCP 300: Manage Alarms 




UCP001: Logon Component 
This use case package contains the logon component. 

UCP 001 - UC 001: Login 
Brief Description 
A user enters his/her username and password in order to have access to the MSLite system. 
Main Success Scenario 
1. User browses to MSLite system web page. 
2. System presents a screen containing username and password fields. 
3. User enters his/her username and password. 
4. System validates username and password through. [BR001], [BR002] 
5. System browses the user to the desired page. 
6. The use case ends. 
Failure Scenarios 
Failure 001.4a 
4a - User has entered a wrong username. 
1. System displays an error message to inform that the login failed. 
Failure 001.4b 
4b - User has entered a wrong password. 
1. System displays an error message to inform that the login failed. 
Failure 001.4c 
4c - Selected rule is being edited by another user or by the current user in another session: 
1. System deselects the selected rule and displays an error message specifying that the rule is being edited by another user or by the current user in another session. 
Failure 001.4d 
4d - MSLite server is not running (system cannot retrieve the Access Control component) 
1. System displays an error message mentioning that the MSLite might not be running. 
Business Rules 
This section describes the business rules associated with the login use case.
[BR001] - The username and password must be validated through the Access Control component. The Access Control must return a valid UserToken whenever the user credentials are valid. 
[BR002] - A successfully logged in user has a UserToken associated with his session object. 

End of UCP 001 - UC 001: Login 

Quality Attribute requirements
Quality attributes, otherwise known as non-functional requirements, describe properties or characteristics of MSLite that are not directly implementable with source code. Quality attributes help define the structure of MSLite and are described in terms of scenarios that identify specific instances of the use and reaction of MSLite. 
The quality attributes of MSLite along with their scenarios are described in the table below. Each scenario is prioritized based on feedback from the stakeholder and the architecture team. The priority of a scenario is done on a relative scale and is given as a tuple of the following: 
1. The importance of each scenario to the success of MSLite 
2. The degree of difficulty posed by the achievement of the scenario during the estimation phase 

For the first element of the tuple, the measures used for priority are as follows: 
High: If this scenario cannot be satisfied, the system will be considered a failure. 
Medium: This scenario is highly desirable for the system; however, if this scenario cannot be satisfied by the system because of a good reason, the system will not be considered a failure. 
Low: This scenario is nice to have. 

For the second element of the tuple, the measures used for priority are as follows: 
High: The architecture team does not know how to do it. 
Medium: The architecture team know how to do it, but it is difficult to do. 
Low: The architecture team knows how to do it and it is considered easy. 

Quality Attribute Characterization Table 
Quality Attribute 
Attribute Characterization 
Attribute Scenarios 
Priority 
Extensibility
Support for multiple FSS 
E1. An additional FSS must be connected to MSLite to support another discipline. MSLite is reconfigured off-line to support the additional FSS instance without development. 
(H , L) 

Support for new FSS 
E2. A new FSS (NFSS) has been developed. NFSS offers functionality comparable to FSS, but configuration information is in a different format and details of the interface (calling conventions, method names, etc.) are different. A team of 4 students who are reasonably comfortable with C# extends MSLite to support NFSS in 144 person hours (12 h per week and person, 3 weeks). 
(M , M) 

Support for extended FSS 
E3. An extended FSS (EFSS) has been developed that supports generation of alarms and functional commands instead of property value changes. A team of 4 students who are reasonably comfortable with C# extends MSLite to support EFSS-generated alarms and EFSS functional commands in 240 person hours (12 h per week and person, 5 weeks). 
(H , H) 
Performance
Latency of event/alarm propagation 
P1. A field system detects a change of some value and notifies MSLite. The system operates under normal conditions1. The value is updated on all user screens that display the old value within 3 seconds. 
P2. An alarm occurs, either originating in a field system or in MSLite. The system operates under normal conditions2. The alarm is displayed on the user interfaces of all users that must receive the alarm within 3 seconds. The Time durations specified in this scenario are performance goals and are not to be taken as hard deadlines. 
(M , M) 
Reliability
Alarm/Event propagation 
R1. The current Field System Simulator (FSS) is set to change a value or trigger an alarm and notifies MSLite. The field system simulator sends 1000 COV notifications per minute for 2 minutes. The MSLite system will preserve any notifications that are initiated from either the MSLite system or from the FSS. Hence, no notifications or events can be lost. 
(H , L) 
Security
Data access control 
S1. An MSLite user wants to view the details and / or change the value of a field point on a GUI screen. The user is logged in and read and / or write access to this field point might be restricted. Depending on the user's permissions for this field point MSLite grants or denies read and / or write access to this field point. 
(M , M) 
Usability
Alarm / event display 
U1. The FSS notifies MSLite of a new event that is not an alarm. This non-alarm event is associated to a field point ‘x’. MSLite is operating under normal conditions3. There are ‘n’ users logged into MSLite. There are ‘m’ users that have read privileges to field point ‘x’. Only relevant GUI screens for these ‘m’ users will reflect the update within having received the notification from the FSS. 
(H , M) 

1,2,3 Normal conditions are temporarily specified as follows: 
number of concurrent sessions connected to MSLite: 15 
COV Rate: Less than 600 COVs per minute. (30 field object properties at 20COVs/Minute) 
Active LnR Rules: 20 
Active Alarm Rules: 20 


